
---
categories: learn
layout: post-detail
title:  "JavaScript 里 this 的简单规则"
date:   2017-09-07 18:00:04 +0800
---

### **JavaScript 里 this 的简单规则**


几条规则确定函数里的 this 是什么。

想确定 this 是什么其实非常简单。总体的规则是，通过检查它的调用位置，在函数被调用的的时候确定 this。它遵循下面这些规则，接下来以优先级顺序说明。




### **规则**


1、如果在调用函数时使用 new 关键字，那么函数里的 this 就是一个全新的对象。

{% highlight ruby %}
function ConstructorExample() {
    console.log(this);
    this.value = 10;
    console.log(this);
}
new ConstructorExample();
// -> {}
// -> { value: 10 }
{% endhighlight %}


2、如果使用 apply、call 或者 bind 调用函数，那么函数里的 this 就是作为参数传进去的对象。


{% highlight ruby %}
function fn() {
    console.log(this);
}
var obj = {
    value: 5
};
var boundFn = fn.bind(obj);
boundFn();     // -> { value: 5 }
fn.call(obj);  // -> { value: 5 }
fn.apply(obj); // -> { value: 5 }
{% endhighlight %}


3、如果函数作为一个方法调用，就是说如果使用点符号调用函数，那么 this 就是拥有这个函数作为属性的对象。换句话说，当一个点在函数调用的左侧时，this 就是这个点左侧的那个对象。


{% highlight ruby %}
var obj = {
    value: 5,
    printThis: function() {
        console.log(this);
    }
};
obj.printThis(); // -> { value: 5, printThis: ƒ }
{% endhighlight %}


4、如果函数作为一个纯粹的函数调用，也就是说，它在没有上述任何条件的情况下被调用，那么 this 就是全局对象。在浏览器里，就是 window 对象。


{% highlight ruby %}
function fn() {
    console.log(this);
}
// 如果在浏览器里调用：
fn(); // -> Window {stop: ƒ, open: ƒ, alert: ƒ, ...}
{% endhighlight %}

**注意这个规则其实和第三个规则是一样的，区别在于没有声明为方法的函数会自动成为全局对象 window 的属性。因此，这其实是一个隐式的方法调用。当我们调用 fn()，其实就会被浏览器理解为 window.fn()，所以 this 就是 window。**


{% highlight ruby %}
console.log(fn === window.fn); // -> true
{% endhighlight %}

5、如果上述规则有多个适用，那么优先级更高的就会设置 this 值。

6、如果是 ES2015 里的箭头函数，那么它将忽略上述所有规则，并在创建的时候接收包含它的作用域作为 this 的值。想确定 this 具体是什么的话，只需从创建箭头函数那里往上一行，看看那儿的 this 是什么，箭头函数里的 this 值和它一样。

{% highlight ruby %}
const obj = {
    value: 'abc',
    createArrowFn: function() {
        return () => console.log(this);
    }
};
const arrowFn = obj.createArrowFn();
arrowFn(); // -> { value: 'abc', createArrowFn: ƒ }
{% endhighlight %}

看回第三个规则，当我们调用 obj.createArrowFn() 的时候，createArrowFn 里的 this 是 obj，因为这是方法调用。因此，obj 会在 arrowFn 里绑定到 this 上。如果我们在全局作用域创建一个箭头函数，那么 this 值就会是 window。



### **应用规则**


让我们来看一个代码示例，并应用这些规则。尝试一下看能否弄清楚不同的函数调用下，this 是什么。


**确定应用了哪条规则**

{% highlight ruby %}
var obj = {
    value: 'hi',
    printThis: function() {
        console.log(this);
    }
};
var print = obj.printThis;
obj.printThis(); // -> {value: "hi", printThis: ƒ}
print(); // -> Window {stop: ƒ, open: ƒ, alert: ƒ, ...}
{% endhighlight %}

obj.printThis() 属于第三条规则，方法调用。另一方面，print() 属于第四条规则，纯粹的函数调用。对于 print() 来说，我们在调用的时候没有使用 new、bind/call/apply 或者点符号，所以它对应了规则四，this 就是全局对象 window。

**当适用多个规则的时候**

当适用多个规则的时候，使用列表里更高优先级的规则。

{% highlight ruby %}
var obj1 = {
    value: 'hi',
    print: function() {
        console.log(this);
    },
};
var obj2 = { value: 17 };
{% endhighlight %}

如果规则二和规则三同时适用，那么规则二占优。
 

{% highlight ruby %}
obj1.print.call(obj2); // -> { value: 17 }
{% endhighlight %}


如果规则一和规则三同时适用，那么规则一占优。
 

{% highlight ruby %}
new obj1.print(); // -> {}
{% endhighlight %}


### **库**

有些库有时候会故意将 this 值绑定到某些函数里。而通常会在函数里将最有用的值绑定到 this 上使用。举个例子，jQuery 把 this 绑定到 DOM 元素上，在回调中触发一个事件。如果某个库出现一个不太符合上述规则的 this 值，那么请仔细阅读这个库的文档，它很有可能使用 bind 绑定了。
 
 

 